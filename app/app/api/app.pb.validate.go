// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/app.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EthAuthorizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EthAuthorizeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EthAuthorizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EthAuthorizeRequestMultiError, or nil if none found.
func (m *EthAuthorizeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EthAuthorizeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EthAuthorizeRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EthAuthorizeRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EthAuthorizeRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EthAuthorizeRequestMultiError(errors)
	}

	return nil
}

// EthAuthorizeRequestMultiError is an error wrapping multiple validation
// errors returned by EthAuthorizeRequest.ValidateAll() if the designated
// constraints aren't met.
type EthAuthorizeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EthAuthorizeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EthAuthorizeRequestMultiError) AllErrors() []error { return m }

// EthAuthorizeRequestValidationError is the validation error returned by
// EthAuthorizeRequest.Validate if the designated constraints aren't met.
type EthAuthorizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EthAuthorizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EthAuthorizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EthAuthorizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EthAuthorizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EthAuthorizeRequestValidationError) ErrorName() string {
	return "EthAuthorizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EthAuthorizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEthAuthorizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EthAuthorizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EthAuthorizeRequestValidationError{}

// Validate checks the field values on EthAuthorizeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EthAuthorizeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EthAuthorizeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EthAuthorizeReplyMultiError, or nil if none found.
func (m *EthAuthorizeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EthAuthorizeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return EthAuthorizeReplyMultiError(errors)
	}

	return nil
}

// EthAuthorizeReplyMultiError is an error wrapping multiple validation errors
// returned by EthAuthorizeReply.ValidateAll() if the designated constraints
// aren't met.
type EthAuthorizeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EthAuthorizeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EthAuthorizeReplyMultiError) AllErrors() []error { return m }

// EthAuthorizeReplyValidationError is the validation error returned by
// EthAuthorizeReply.Validate if the designated constraints aren't met.
type EthAuthorizeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EthAuthorizeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EthAuthorizeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EthAuthorizeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EthAuthorizeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EthAuthorizeReplyValidationError) ErrorName() string {
	return "EthAuthorizeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e EthAuthorizeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEthAuthorizeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EthAuthorizeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EthAuthorizeReplyValidationError{}

// Validate checks the field values on DepositRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DepositRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DepositRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DepositRequestMultiError,
// or nil if none found.
func (m *DepositRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DepositRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DepositRequestMultiError(errors)
	}

	return nil
}

// DepositRequestMultiError is an error wrapping multiple validation errors
// returned by DepositRequest.ValidateAll() if the designated constraints
// aren't met.
type DepositRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DepositRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DepositRequestMultiError) AllErrors() []error { return m }

// DepositRequestValidationError is the validation error returned by
// DepositRequest.Validate if the designated constraints aren't met.
type DepositRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepositRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepositRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepositRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepositRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepositRequestValidationError) ErrorName() string { return "DepositRequestValidationError" }

// Error satisfies the builtin error interface
func (e DepositRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepositRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepositRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepositRequestValidationError{}

// Validate checks the field values on DepositReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DepositReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DepositReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DepositReplyMultiError, or
// nil if none found.
func (m *DepositReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DepositReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DepositReplyMultiError(errors)
	}

	return nil
}

// DepositReplyMultiError is an error wrapping multiple validation errors
// returned by DepositReply.ValidateAll() if the designated constraints aren't met.
type DepositReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DepositReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DepositReplyMultiError) AllErrors() []error { return m }

// DepositReplyValidationError is the validation error returned by
// DepositReply.Validate if the designated constraints aren't met.
type DepositReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepositReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepositReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepositReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepositReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepositReplyValidationError) ErrorName() string { return "DepositReplyValidationError" }

// Error satisfies the builtin error interface
func (e DepositReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepositReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepositReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepositReplyValidationError{}

// Validate checks the field values on UserInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInfoRequestMultiError, or nil if none found.
func (m *UserInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserInfoRequestMultiError(errors)
	}

	return nil
}

// UserInfoRequestMultiError is an error wrapping multiple validation errors
// returned by UserInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type UserInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoRequestMultiError) AllErrors() []error { return m }

// UserInfoRequestValidationError is the validation error returned by
// UserInfoRequest.Validate if the designated constraints aren't met.
type UserInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoRequestValidationError) ErrorName() string { return "UserInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoRequestValidationError{}

// Validate checks the field values on UserInfoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoReplyMultiError, or
// nil if none found.
func (m *UserInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Level

	// no validation rules for Status

	// no validation rules for Amount

	// no validation rules for BalanceUsdt

	// no validation rules for BalanceDhb

	// no validation rules for InviteUrl

	// no validation rules for InviteUserAddress

	// no validation rules for RecommendNum

	// no validation rules for RecommendTeamNum

	// no validation rules for Total

	// no validation rules for Row

	// no validation rules for Col

	// no validation rules for RecommendTotal

	// no validation rules for LocationTotal

	// no validation rules for Usdt

	// no validation rules for Account

	// no validation rules for RecommendNumAll

	// no validation rules for RecommendTeamAll

	// no validation rules for AmountB

	// no validation rules for RecommendVipTotal

	// no validation rules for FeeDaily

	// no validation rules for WithdrawAmount

	// no validation rules for UserCount

	// no validation rules for TotalDeposit

	// no validation rules for PoolAmount

	for idx, item := range m.GetTopUser() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserInfoReplyValidationError{
						field:  fmt.Sprintf("TopUser[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserInfoReplyValidationError{
						field:  fmt.Sprintf("TopUser[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserInfoReplyValidationError{
					field:  fmt.Sprintf("TopUser[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for LocationCount

	// no validation rules for TodayReward

	// no validation rules for RecommendTop

	// no validation rules for LocationTotalCol

	// no validation rules for LocationTotalRow

	// no validation rules for BnbAmount

	if len(errors) > 0 {
		return UserInfoReplyMultiError(errors)
	}

	return nil
}

// UserInfoReplyMultiError is an error wrapping multiple validation errors
// returned by UserInfoReply.ValidateAll() if the designated constraints
// aren't met.
type UserInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoReplyMultiError) AllErrors() []error { return m }

// UserInfoReplyValidationError is the validation error returned by
// UserInfoReply.Validate if the designated constraints aren't met.
type UserInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoReplyValidationError) ErrorName() string { return "UserInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoReplyValidationError{}

// Validate checks the field values on RewardListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RewardListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RewardListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RewardListRequestMultiError, or nil if none found.
func (m *RewardListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RewardListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return RewardListRequestMultiError(errors)
	}

	return nil
}

// RewardListRequestMultiError is an error wrapping multiple validation errors
// returned by RewardListRequest.ValidateAll() if the designated constraints
// aren't met.
type RewardListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RewardListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RewardListRequestMultiError) AllErrors() []error { return m }

// RewardListRequestValidationError is the validation error returned by
// RewardListRequest.Validate if the designated constraints aren't met.
type RewardListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewardListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewardListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewardListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewardListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewardListRequestValidationError) ErrorName() string {
	return "RewardListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RewardListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRewardListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewardListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewardListRequestValidationError{}

// Validate checks the field values on RewardListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RewardListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RewardListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RewardListReplyMultiError, or nil if none found.
func (m *RewardListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RewardListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RewardListReplyValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RewardListReplyMultiError(errors)
	}

	return nil
}

// RewardListReplyMultiError is an error wrapping multiple validation errors
// returned by RewardListReply.ValidateAll() if the designated constraints
// aren't met.
type RewardListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RewardListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RewardListReplyMultiError) AllErrors() []error { return m }

// RewardListReplyValidationError is the validation error returned by
// RewardListReply.Validate if the designated constraints aren't met.
type RewardListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewardListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewardListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewardListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewardListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewardListReplyValidationError) ErrorName() string { return "RewardListReplyValidationError" }

// Error satisfies the builtin error interface
func (e RewardListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRewardListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewardListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewardListReplyValidationError{}

// Validate checks the field values on RecommendRewardListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendRewardListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendRewardListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecommendRewardListRequestMultiError, or nil if none found.
func (m *RecommendRewardListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendRewardListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RecommendRewardListRequestMultiError(errors)
	}

	return nil
}

// RecommendRewardListRequestMultiError is an error wrapping multiple
// validation errors returned by RecommendRewardListRequest.ValidateAll() if
// the designated constraints aren't met.
type RecommendRewardListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendRewardListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendRewardListRequestMultiError) AllErrors() []error { return m }

// RecommendRewardListRequestValidationError is the validation error returned
// by RecommendRewardListRequest.Validate if the designated constraints aren't met.
type RecommendRewardListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendRewardListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendRewardListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendRewardListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendRewardListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendRewardListRequestValidationError) ErrorName() string {
	return "RecommendRewardListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendRewardListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendRewardListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendRewardListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendRewardListRequestValidationError{}

// Validate checks the field values on RecommendRewardListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendRewardListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendRewardListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecommendRewardListReplyMultiError, or nil if none found.
func (m *RecommendRewardListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendRewardListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RecommendRewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RecommendRewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RecommendRewardListReplyValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RecommendRewardListReplyMultiError(errors)
	}

	return nil
}

// RecommendRewardListReplyMultiError is an error wrapping multiple validation
// errors returned by RecommendRewardListReply.ValidateAll() if the designated
// constraints aren't met.
type RecommendRewardListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendRewardListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendRewardListReplyMultiError) AllErrors() []error { return m }

// RecommendRewardListReplyValidationError is the validation error returned by
// RecommendRewardListReply.Validate if the designated constraints aren't met.
type RecommendRewardListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendRewardListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendRewardListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendRewardListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendRewardListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendRewardListReplyValidationError) ErrorName() string {
	return "RecommendRewardListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendRewardListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendRewardListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendRewardListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendRewardListReplyValidationError{}

// Validate checks the field values on FeeRewardListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeeRewardListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeeRewardListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeeRewardListRequestMultiError, or nil if none found.
func (m *FeeRewardListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeeRewardListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FeeRewardListRequestMultiError(errors)
	}

	return nil
}

// FeeRewardListRequestMultiError is an error wrapping multiple validation
// errors returned by FeeRewardListRequest.ValidateAll() if the designated
// constraints aren't met.
type FeeRewardListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeeRewardListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeeRewardListRequestMultiError) AllErrors() []error { return m }

// FeeRewardListRequestValidationError is the validation error returned by
// FeeRewardListRequest.Validate if the designated constraints aren't met.
type FeeRewardListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeeRewardListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeeRewardListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeeRewardListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeeRewardListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeeRewardListRequestValidationError) ErrorName() string {
	return "FeeRewardListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeeRewardListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeeRewardListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeeRewardListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeeRewardListRequestValidationError{}

// Validate checks the field values on FeeRewardListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeeRewardListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeeRewardListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeeRewardListReplyMultiError, or nil if none found.
func (m *FeeRewardListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FeeRewardListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeeRewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeeRewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeeRewardListReplyValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FeeRewardListReplyMultiError(errors)
	}

	return nil
}

// FeeRewardListReplyMultiError is an error wrapping multiple validation errors
// returned by FeeRewardListReply.ValidateAll() if the designated constraints
// aren't met.
type FeeRewardListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeeRewardListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeeRewardListReplyMultiError) AllErrors() []error { return m }

// FeeRewardListReplyValidationError is the validation error returned by
// FeeRewardListReply.Validate if the designated constraints aren't met.
type FeeRewardListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeeRewardListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeeRewardListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeeRewardListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeeRewardListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeeRewardListReplyValidationError) ErrorName() string {
	return "FeeRewardListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FeeRewardListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeeRewardListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeeRewardListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeeRewardListReplyValidationError{}

// Validate checks the field values on WithdrawListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawListRequestMultiError, or nil if none found.
func (m *WithdrawListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return WithdrawListRequestMultiError(errors)
	}

	return nil
}

// WithdrawListRequestMultiError is an error wrapping multiple validation
// errors returned by WithdrawListRequest.ValidateAll() if the designated
// constraints aren't met.
type WithdrawListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawListRequestMultiError) AllErrors() []error { return m }

// WithdrawListRequestValidationError is the validation error returned by
// WithdrawListRequest.Validate if the designated constraints aren't met.
type WithdrawListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawListRequestValidationError) ErrorName() string {
	return "WithdrawListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawListRequestValidationError{}

// Validate checks the field values on WithdrawListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WithdrawListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawListReplyMultiError, or nil if none found.
func (m *WithdrawListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWithdraw() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WithdrawListReplyValidationError{
						field:  fmt.Sprintf("Withdraw[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WithdrawListReplyValidationError{
						field:  fmt.Sprintf("Withdraw[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WithdrawListReplyValidationError{
					field:  fmt.Sprintf("Withdraw[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WithdrawListReplyMultiError(errors)
	}

	return nil
}

// WithdrawListReplyMultiError is an error wrapping multiple validation errors
// returned by WithdrawListReply.ValidateAll() if the designated constraints
// aren't met.
type WithdrawListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawListReplyMultiError) AllErrors() []error { return m }

// WithdrawListReplyValidationError is the validation error returned by
// WithdrawListReply.Validate if the designated constraints aren't met.
type WithdrawListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawListReplyValidationError) ErrorName() string {
	return "WithdrawListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawListReplyValidationError{}

// Validate checks the field values on RecommendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecommendListRequestMultiError, or nil if none found.
func (m *RecommendListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return RecommendListRequestMultiError(errors)
	}

	return nil
}

// RecommendListRequestMultiError is an error wrapping multiple validation
// errors returned by RecommendListRequest.ValidateAll() if the designated
// constraints aren't met.
type RecommendListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendListRequestMultiError) AllErrors() []error { return m }

// RecommendListRequestValidationError is the validation error returned by
// RecommendListRequest.Validate if the designated constraints aren't met.
type RecommendListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendListRequestValidationError) ErrorName() string {
	return "RecommendListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendListRequestValidationError{}

// Validate checks the field values on RecommendListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecommendListReplyMultiError, or nil if none found.
func (m *RecommendListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecommends() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RecommendListReplyValidationError{
						field:  fmt.Sprintf("Recommends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RecommendListReplyValidationError{
						field:  fmt.Sprintf("Recommends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RecommendListReplyValidationError{
					field:  fmt.Sprintf("Recommends[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RecommendListReplyMultiError(errors)
	}

	return nil
}

// RecommendListReplyMultiError is an error wrapping multiple validation errors
// returned by RecommendListReply.ValidateAll() if the designated constraints
// aren't met.
type RecommendListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendListReplyMultiError) AllErrors() []error { return m }

// RecommendListReplyValidationError is the validation error returned by
// RecommendListReply.Validate if the designated constraints aren't met.
type RecommendListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendListReplyValidationError) ErrorName() string {
	return "RecommendListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendListReplyValidationError{}

// Validate checks the field values on WithdrawRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WithdrawRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawRequestMultiError, or nil if none found.
func (m *WithdrawRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WithdrawRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WithdrawRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WithdrawRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WithdrawRequestMultiError(errors)
	}

	return nil
}

// WithdrawRequestMultiError is an error wrapping multiple validation errors
// returned by WithdrawRequest.ValidateAll() if the designated constraints
// aren't met.
type WithdrawRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawRequestMultiError) AllErrors() []error { return m }

// WithdrawRequestValidationError is the validation error returned by
// WithdrawRequest.Validate if the designated constraints aren't met.
type WithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawRequestValidationError) ErrorName() string { return "WithdrawRequestValidationError" }

// Error satisfies the builtin error interface
func (e WithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawRequestValidationError{}

// Validate checks the field values on WithdrawReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WithdrawReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WithdrawReplyMultiError, or
// nil if none found.
func (m *WithdrawReply) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return WithdrawReplyMultiError(errors)
	}

	return nil
}

// WithdrawReplyMultiError is an error wrapping multiple validation errors
// returned by WithdrawReply.ValidateAll() if the designated constraints
// aren't met.
type WithdrawReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawReplyMultiError) AllErrors() []error { return m }

// WithdrawReplyValidationError is the validation error returned by
// WithdrawReply.Validate if the designated constraints aren't met.
type WithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawReplyValidationError) ErrorName() string { return "WithdrawReplyValidationError" }

// Error satisfies the builtin error interface
func (e WithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawReplyValidationError{}

// Validate checks the field values on AdminRewardListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminRewardListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminRewardListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminRewardListRequestMultiError, or nil if none found.
func (m *AdminRewardListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminRewardListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Address

	if len(errors) > 0 {
		return AdminRewardListRequestMultiError(errors)
	}

	return nil
}

// AdminRewardListRequestMultiError is an error wrapping multiple validation
// errors returned by AdminRewardListRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminRewardListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminRewardListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminRewardListRequestMultiError) AllErrors() []error { return m }

// AdminRewardListRequestValidationError is the validation error returned by
// AdminRewardListRequest.Validate if the designated constraints aren't met.
type AdminRewardListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminRewardListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminRewardListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminRewardListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminRewardListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminRewardListRequestValidationError) ErrorName() string {
	return "AdminRewardListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminRewardListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminRewardListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminRewardListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminRewardListRequestValidationError{}

// Validate checks the field values on AdminRewardListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminRewardListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminRewardListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminRewardListReplyMultiError, or nil if none found.
func (m *AdminRewardListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminRewardListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminRewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminRewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminRewardListReplyValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AdminRewardListReplyMultiError(errors)
	}

	return nil
}

// AdminRewardListReplyMultiError is an error wrapping multiple validation
// errors returned by AdminRewardListReply.ValidateAll() if the designated
// constraints aren't met.
type AdminRewardListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminRewardListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminRewardListReplyMultiError) AllErrors() []error { return m }

// AdminRewardListReplyValidationError is the validation error returned by
// AdminRewardListReply.Validate if the designated constraints aren't met.
type AdminRewardListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminRewardListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminRewardListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminRewardListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminRewardListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminRewardListReplyValidationError) ErrorName() string {
	return "AdminRewardListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminRewardListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminRewardListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminRewardListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminRewardListReplyValidationError{}

// Validate checks the field values on AdminUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUserListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUserListRequestMultiError, or nil if none found.
func (m *AdminUserListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Address

	if len(errors) > 0 {
		return AdminUserListRequestMultiError(errors)
	}

	return nil
}

// AdminUserListRequestMultiError is an error wrapping multiple validation
// errors returned by AdminUserListRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminUserListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserListRequestMultiError) AllErrors() []error { return m }

// AdminUserListRequestValidationError is the validation error returned by
// AdminUserListRequest.Validate if the designated constraints aren't met.
type AdminUserListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserListRequestValidationError) ErrorName() string {
	return "AdminUserListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUserListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserListRequestValidationError{}

// Validate checks the field values on AdminUserListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUserListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUserListReplyMultiError, or nil if none found.
func (m *AdminUserListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminUserListReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminUserListReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminUserListReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AdminUserListReplyMultiError(errors)
	}

	return nil
}

// AdminUserListReplyMultiError is an error wrapping multiple validation errors
// returned by AdminUserListReply.ValidateAll() if the designated constraints
// aren't met.
type AdminUserListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserListReplyMultiError) AllErrors() []error { return m }

// AdminUserListReplyValidationError is the validation error returned by
// AdminUserListReply.Validate if the designated constraints aren't met.
type AdminUserListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserListReplyValidationError) ErrorName() string {
	return "AdminUserListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUserListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserListReplyValidationError{}

// Validate checks the field values on AdminLocationListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminLocationListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLocationListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminLocationListRequestMultiError, or nil if none found.
func (m *AdminLocationListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLocationListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Address

	if len(errors) > 0 {
		return AdminLocationListRequestMultiError(errors)
	}

	return nil
}

// AdminLocationListRequestMultiError is an error wrapping multiple validation
// errors returned by AdminLocationListRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminLocationListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLocationListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLocationListRequestMultiError) AllErrors() []error { return m }

// AdminLocationListRequestValidationError is the validation error returned by
// AdminLocationListRequest.Validate if the designated constraints aren't met.
type AdminLocationListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLocationListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLocationListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLocationListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLocationListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLocationListRequestValidationError) ErrorName() string {
	return "AdminLocationListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminLocationListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLocationListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLocationListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLocationListRequestValidationError{}

// Validate checks the field values on AdminLocationListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminLocationListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLocationListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminLocationListReplyMultiError, or nil if none found.
func (m *AdminLocationListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLocationListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminLocationListReplyValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminLocationListReplyValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminLocationListReplyValidationError{
					field:  fmt.Sprintf("Locations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AdminLocationListReplyMultiError(errors)
	}

	return nil
}

// AdminLocationListReplyMultiError is an error wrapping multiple validation
// errors returned by AdminLocationListReply.ValidateAll() if the designated
// constraints aren't met.
type AdminLocationListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLocationListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLocationListReplyMultiError) AllErrors() []error { return m }

// AdminLocationListReplyValidationError is the validation error returned by
// AdminLocationListReply.Validate if the designated constraints aren't met.
type AdminLocationListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLocationListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLocationListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLocationListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLocationListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLocationListReplyValidationError) ErrorName() string {
	return "AdminLocationListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminLocationListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLocationListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLocationListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLocationListReplyValidationError{}

// Validate checks the field values on AdminWithdrawListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawListRequestMultiError, or nil if none found.
func (m *AdminWithdrawListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Address

	if len(errors) > 0 {
		return AdminWithdrawListRequestMultiError(errors)
	}

	return nil
}

// AdminWithdrawListRequestMultiError is an error wrapping multiple validation
// errors returned by AdminWithdrawListRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminWithdrawListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawListRequestMultiError) AllErrors() []error { return m }

// AdminWithdrawListRequestValidationError is the validation error returned by
// AdminWithdrawListRequest.Validate if the designated constraints aren't met.
type AdminWithdrawListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawListRequestValidationError) ErrorName() string {
	return "AdminWithdrawListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawListRequestValidationError{}

// Validate checks the field values on AdminWithdrawListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawListReplyMultiError, or nil if none found.
func (m *AdminWithdrawListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWithdraw() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminWithdrawListReplyValidationError{
						field:  fmt.Sprintf("Withdraw[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminWithdrawListReplyValidationError{
						field:  fmt.Sprintf("Withdraw[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminWithdrawListReplyValidationError{
					field:  fmt.Sprintf("Withdraw[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AdminWithdrawListReplyMultiError(errors)
	}

	return nil
}

// AdminWithdrawListReplyMultiError is an error wrapping multiple validation
// errors returned by AdminWithdrawListReply.ValidateAll() if the designated
// constraints aren't met.
type AdminWithdrawListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawListReplyMultiError) AllErrors() []error { return m }

// AdminWithdrawListReplyValidationError is the validation error returned by
// AdminWithdrawListReply.Validate if the designated constraints aren't met.
type AdminWithdrawListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawListReplyValidationError) ErrorName() string {
	return "AdminWithdrawListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawListReplyValidationError{}

// Validate checks the field values on AdminWithdrawRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawRequestMultiError, or nil if none found.
func (m *AdminWithdrawRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminWithdrawRequestMultiError(errors)
	}

	return nil
}

// AdminWithdrawRequestMultiError is an error wrapping multiple validation
// errors returned by AdminWithdrawRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminWithdrawRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawRequestMultiError) AllErrors() []error { return m }

// AdminWithdrawRequestValidationError is the validation error returned by
// AdminWithdrawRequest.Validate if the designated constraints aren't met.
type AdminWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawRequestValidationError) ErrorName() string {
	return "AdminWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawRequestValidationError{}

// Validate checks the field values on AdminWithdrawReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawReplyMultiError, or nil if none found.
func (m *AdminWithdrawReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminWithdrawReplyMultiError(errors)
	}

	return nil
}

// AdminWithdrawReplyMultiError is an error wrapping multiple validation errors
// returned by AdminWithdrawReply.ValidateAll() if the designated constraints
// aren't met.
type AdminWithdrawReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawReplyMultiError) AllErrors() []error { return m }

// AdminWithdrawReplyValidationError is the validation error returned by
// AdminWithdrawReply.Validate if the designated constraints aren't met.
type AdminWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawReplyValidationError) ErrorName() string {
	return "AdminWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawReplyValidationError{}

// Validate checks the field values on AdminWithdrawEthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawEthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawEthRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawEthRequestMultiError, or nil if none found.
func (m *AdminWithdrawEthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawEthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminWithdrawEthRequestMultiError(errors)
	}

	return nil
}

// AdminWithdrawEthRequestMultiError is an error wrapping multiple validation
// errors returned by AdminWithdrawEthRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminWithdrawEthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawEthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawEthRequestMultiError) AllErrors() []error { return m }

// AdminWithdrawEthRequestValidationError is the validation error returned by
// AdminWithdrawEthRequest.Validate if the designated constraints aren't met.
type AdminWithdrawEthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawEthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawEthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawEthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawEthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawEthRequestValidationError) ErrorName() string {
	return "AdminWithdrawEthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawEthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawEthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawEthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawEthRequestValidationError{}

// Validate checks the field values on AdminWithdrawEthReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawEthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawEthReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawEthReplyMultiError, or nil if none found.
func (m *AdminWithdrawEthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawEthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminWithdrawEthReplyMultiError(errors)
	}

	return nil
}

// AdminWithdrawEthReplyMultiError is an error wrapping multiple validation
// errors returned by AdminWithdrawEthReply.ValidateAll() if the designated
// constraints aren't met.
type AdminWithdrawEthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawEthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawEthReplyMultiError) AllErrors() []error { return m }

// AdminWithdrawEthReplyValidationError is the validation error returned by
// AdminWithdrawEthReply.Validate if the designated constraints aren't met.
type AdminWithdrawEthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawEthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawEthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawEthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawEthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawEthReplyValidationError) ErrorName() string {
	return "AdminWithdrawEthReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawEthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawEthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawEthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawEthReplyValidationError{}

// Validate checks the field values on AdminFeeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminFeeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminFeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminFeeRequestMultiError, or nil if none found.
func (m *AdminFeeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminFeeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminFeeRequestMultiError(errors)
	}

	return nil
}

// AdminFeeRequestMultiError is an error wrapping multiple validation errors
// returned by AdminFeeRequest.ValidateAll() if the designated constraints
// aren't met.
type AdminFeeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminFeeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminFeeRequestMultiError) AllErrors() []error { return m }

// AdminFeeRequestValidationError is the validation error returned by
// AdminFeeRequest.Validate if the designated constraints aren't met.
type AdminFeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminFeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminFeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminFeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminFeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminFeeRequestValidationError) ErrorName() string { return "AdminFeeRequestValidationError" }

// Error satisfies the builtin error interface
func (e AdminFeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminFeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminFeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminFeeRequestValidationError{}

// Validate checks the field values on AdminFeeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminFeeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminFeeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminFeeReplyMultiError, or
// nil if none found.
func (m *AdminFeeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminFeeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminFeeReplyMultiError(errors)
	}

	return nil
}

// AdminFeeReplyMultiError is an error wrapping multiple validation errors
// returned by AdminFeeReply.ValidateAll() if the designated constraints
// aren't met.
type AdminFeeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminFeeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminFeeReplyMultiError) AllErrors() []error { return m }

// AdminFeeReplyValidationError is the validation error returned by
// AdminFeeReply.Validate if the designated constraints aren't met.
type AdminFeeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminFeeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminFeeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminFeeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminFeeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminFeeReplyValidationError) ErrorName() string { return "AdminFeeReplyValidationError" }

// Error satisfies the builtin error interface
func (e AdminFeeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminFeeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminFeeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminFeeReplyValidationError{}

// Validate checks the field values on AdminAllRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminAllRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminAllRequestMultiError, or nil if none found.
func (m *AdminAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminAllRequestMultiError(errors)
	}

	return nil
}

// AdminAllRequestMultiError is an error wrapping multiple validation errors
// returned by AdminAllRequest.ValidateAll() if the designated constraints
// aren't met.
type AdminAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAllRequestMultiError) AllErrors() []error { return m }

// AdminAllRequestValidationError is the validation error returned by
// AdminAllRequest.Validate if the designated constraints aren't met.
type AdminAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAllRequestValidationError) ErrorName() string { return "AdminAllRequestValidationError" }

// Error satisfies the builtin error interface
func (e AdminAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAllRequestValidationError{}

// Validate checks the field values on AdminAllReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminAllReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminAllReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminAllReplyMultiError, or
// nil if none found.
func (m *AdminAllReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAllReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TodayTotalUser

	// no validation rules for TotalUser

	// no validation rules for AllBalance

	// no validation rules for TodayLocation

	// no validation rules for AllLocation

	// no validation rules for TodayWithdraw

	// no validation rules for AllWithdraw

	// no validation rules for AllReward

	// no validation rules for AllSystemRewardAndFee

	if len(errors) > 0 {
		return AdminAllReplyMultiError(errors)
	}

	return nil
}

// AdminAllReplyMultiError is an error wrapping multiple validation errors
// returned by AdminAllReply.ValidateAll() if the designated constraints
// aren't met.
type AdminAllReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAllReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAllReplyMultiError) AllErrors() []error { return m }

// AdminAllReplyValidationError is the validation error returned by
// AdminAllReply.Validate if the designated constraints aren't met.
type AdminAllReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAllReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAllReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAllReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAllReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAllReplyValidationError) ErrorName() string { return "AdminAllReplyValidationError" }

// Error satisfies the builtin error interface
func (e AdminAllReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAllReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAllReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAllReplyValidationError{}

// Validate checks the field values on AdminUserRecommendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUserRecommendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserRecommendRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUserRecommendRequestMultiError, or nil if none found.
func (m *AdminUserRecommendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserRecommendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return AdminUserRecommendRequestMultiError(errors)
	}

	return nil
}

// AdminUserRecommendRequestMultiError is an error wrapping multiple validation
// errors returned by AdminUserRecommendRequest.ValidateAll() if the
// designated constraints aren't met.
type AdminUserRecommendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserRecommendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserRecommendRequestMultiError) AllErrors() []error { return m }

// AdminUserRecommendRequestValidationError is the validation error returned by
// AdminUserRecommendRequest.Validate if the designated constraints aren't met.
type AdminUserRecommendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserRecommendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserRecommendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserRecommendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserRecommendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserRecommendRequestValidationError) ErrorName() string {
	return "AdminUserRecommendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUserRecommendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserRecommendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserRecommendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserRecommendRequestValidationError{}

// Validate checks the field values on AdminUserRecommendReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUserRecommendReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserRecommendReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUserRecommendReplyMultiError, or nil if none found.
func (m *AdminUserRecommendReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserRecommendReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminUserRecommendReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminUserRecommendReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminUserRecommendReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdminUserRecommendReplyMultiError(errors)
	}

	return nil
}

// AdminUserRecommendReplyMultiError is an error wrapping multiple validation
// errors returned by AdminUserRecommendReply.ValidateAll() if the designated
// constraints aren't met.
type AdminUserRecommendReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserRecommendReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserRecommendReplyMultiError) AllErrors() []error { return m }

// AdminUserRecommendReplyValidationError is the validation error returned by
// AdminUserRecommendReply.Validate if the designated constraints aren't met.
type AdminUserRecommendReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserRecommendReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserRecommendReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserRecommendReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserRecommendReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserRecommendReplyValidationError) ErrorName() string {
	return "AdminUserRecommendReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUserRecommendReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserRecommendReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserRecommendReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserRecommendReplyValidationError{}

// Validate checks the field values on AdminMonthRecommendRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminMonthRecommendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminMonthRecommendRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminMonthRecommendRequestMultiError, or nil if none found.
func (m *AdminMonthRecommendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminMonthRecommendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Page

	if len(errors) > 0 {
		return AdminMonthRecommendRequestMultiError(errors)
	}

	return nil
}

// AdminMonthRecommendRequestMultiError is an error wrapping multiple
// validation errors returned by AdminMonthRecommendRequest.ValidateAll() if
// the designated constraints aren't met.
type AdminMonthRecommendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminMonthRecommendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminMonthRecommendRequestMultiError) AllErrors() []error { return m }

// AdminMonthRecommendRequestValidationError is the validation error returned
// by AdminMonthRecommendRequest.Validate if the designated constraints aren't met.
type AdminMonthRecommendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminMonthRecommendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminMonthRecommendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminMonthRecommendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminMonthRecommendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminMonthRecommendRequestValidationError) ErrorName() string {
	return "AdminMonthRecommendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminMonthRecommendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminMonthRecommendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminMonthRecommendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminMonthRecommendRequestValidationError{}

// Validate checks the field values on AdminMonthRecommendReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminMonthRecommendReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminMonthRecommendReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminMonthRecommendReplyMultiError, or nil if none found.
func (m *AdminMonthRecommendReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminMonthRecommendReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminMonthRecommendReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminMonthRecommendReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminMonthRecommendReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AdminMonthRecommendReplyMultiError(errors)
	}

	return nil
}

// AdminMonthRecommendReplyMultiError is an error wrapping multiple validation
// errors returned by AdminMonthRecommendReply.ValidateAll() if the designated
// constraints aren't met.
type AdminMonthRecommendReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminMonthRecommendReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminMonthRecommendReplyMultiError) AllErrors() []error { return m }

// AdminMonthRecommendReplyValidationError is the validation error returned by
// AdminMonthRecommendReply.Validate if the designated constraints aren't met.
type AdminMonthRecommendReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminMonthRecommendReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminMonthRecommendReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminMonthRecommendReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminMonthRecommendReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminMonthRecommendReplyValidationError) ErrorName() string {
	return "AdminMonthRecommendReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminMonthRecommendReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminMonthRecommendReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminMonthRecommendReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminMonthRecommendReplyValidationError{}

// Validate checks the field values on AdminConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminConfigRequestMultiError, or nil if none found.
func (m *AdminConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Page

	if len(errors) > 0 {
		return AdminConfigRequestMultiError(errors)
	}

	return nil
}

// AdminConfigRequestMultiError is an error wrapping multiple validation errors
// returned by AdminConfigRequest.ValidateAll() if the designated constraints
// aren't met.
type AdminConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminConfigRequestMultiError) AllErrors() []error { return m }

// AdminConfigRequestValidationError is the validation error returned by
// AdminConfigRequest.Validate if the designated constraints aren't met.
type AdminConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminConfigRequestValidationError) ErrorName() string {
	return "AdminConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminConfigRequestValidationError{}

// Validate checks the field values on AdminConfigReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminConfigReplyMultiError, or nil if none found.
func (m *AdminConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConfig() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminConfigReplyValidationError{
						field:  fmt.Sprintf("Config[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminConfigReplyValidationError{
						field:  fmt.Sprintf("Config[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminConfigReplyValidationError{
					field:  fmt.Sprintf("Config[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AdminConfigReplyMultiError(errors)
	}

	return nil
}

// AdminConfigReplyMultiError is an error wrapping multiple validation errors
// returned by AdminConfigReply.ValidateAll() if the designated constraints
// aren't met.
type AdminConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminConfigReplyMultiError) AllErrors() []error { return m }

// AdminConfigReplyValidationError is the validation error returned by
// AdminConfigReply.Validate if the designated constraints aren't met.
type AdminConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminConfigReplyValidationError) ErrorName() string { return "AdminConfigReplyValidationError" }

// Error satisfies the builtin error interface
func (e AdminConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminConfigReplyValidationError{}

// Validate checks the field values on AdminConfigUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminConfigUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminConfigUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminConfigUpdateRequestMultiError, or nil if none found.
func (m *AdminConfigUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminConfigUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminConfigUpdateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminConfigUpdateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminConfigUpdateRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminConfigUpdateRequestMultiError(errors)
	}

	return nil
}

// AdminConfigUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by AdminConfigUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminConfigUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminConfigUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminConfigUpdateRequestMultiError) AllErrors() []error { return m }

// AdminConfigUpdateRequestValidationError is the validation error returned by
// AdminConfigUpdateRequest.Validate if the designated constraints aren't met.
type AdminConfigUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminConfigUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminConfigUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminConfigUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminConfigUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminConfigUpdateRequestValidationError) ErrorName() string {
	return "AdminConfigUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminConfigUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminConfigUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminConfigUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminConfigUpdateRequestValidationError{}

// Validate checks the field values on AdminConfigUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminConfigUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminConfigUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminConfigUpdateReplyMultiError, or nil if none found.
func (m *AdminConfigUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminConfigUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminConfigUpdateReplyMultiError(errors)
	}

	return nil
}

// AdminConfigUpdateReplyMultiError is an error wrapping multiple validation
// errors returned by AdminConfigUpdateReply.ValidateAll() if the designated
// constraints aren't met.
type AdminConfigUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminConfigUpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminConfigUpdateReplyMultiError) AllErrors() []error { return m }

// AdminConfigUpdateReplyValidationError is the validation error returned by
// AdminConfigUpdateReply.Validate if the designated constraints aren't met.
type AdminConfigUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminConfigUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminConfigUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminConfigUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminConfigUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminConfigUpdateReplyValidationError) ErrorName() string {
	return "AdminConfigUpdateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminConfigUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminConfigUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminConfigUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminConfigUpdateReplyValidationError{}

// Validate checks the field values on EthAuthorizeRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EthAuthorizeRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EthAuthorizeRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EthAuthorizeRequest_SendBodyMultiError, or nil if none found.
func (m *EthAuthorizeRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *EthAuthorizeRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Code

	if len(errors) > 0 {
		return EthAuthorizeRequest_SendBodyMultiError(errors)
	}

	return nil
}

// EthAuthorizeRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by EthAuthorizeRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type EthAuthorizeRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EthAuthorizeRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EthAuthorizeRequest_SendBodyMultiError) AllErrors() []error { return m }

// EthAuthorizeRequest_SendBodyValidationError is the validation error returned
// by EthAuthorizeRequest_SendBody.Validate if the designated constraints
// aren't met.
type EthAuthorizeRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EthAuthorizeRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EthAuthorizeRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EthAuthorizeRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EthAuthorizeRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EthAuthorizeRequest_SendBodyValidationError) ErrorName() string {
	return "EthAuthorizeRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e EthAuthorizeRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEthAuthorizeRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EthAuthorizeRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EthAuthorizeRequest_SendBodyValidationError{}

// Validate checks the field values on UserInfoReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserInfoReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInfoReply_ListMultiError, or nil if none found.
func (m *UserInfoReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for RecommendReward

	// no validation rules for Reward

	if len(errors) > 0 {
		return UserInfoReply_ListMultiError(errors)
	}

	return nil
}

// UserInfoReply_ListMultiError is an error wrapping multiple validation errors
// returned by UserInfoReply_List.ValidateAll() if the designated constraints
// aren't met.
type UserInfoReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoReply_ListMultiError) AllErrors() []error { return m }

// UserInfoReply_ListValidationError is the validation error returned by
// UserInfoReply_List.Validate if the designated constraints aren't met.
type UserInfoReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoReply_ListValidationError) ErrorName() string {
	return "UserInfoReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e UserInfoReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoReply_ListValidationError{}

// Validate checks the field values on RewardListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RewardListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RewardListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RewardListReply_ListMultiError, or nil if none found.
func (m *RewardListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *RewardListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Amount

	// no validation rules for LocationStatus

	// no validation rules for Type

	if len(errors) > 0 {
		return RewardListReply_ListMultiError(errors)
	}

	return nil
}

// RewardListReply_ListMultiError is an error wrapping multiple validation
// errors returned by RewardListReply_List.ValidateAll() if the designated
// constraints aren't met.
type RewardListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RewardListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RewardListReply_ListMultiError) AllErrors() []error { return m }

// RewardListReply_ListValidationError is the validation error returned by
// RewardListReply_List.Validate if the designated constraints aren't met.
type RewardListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewardListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewardListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewardListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewardListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewardListReply_ListValidationError) ErrorName() string {
	return "RewardListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e RewardListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRewardListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewardListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewardListReply_ListValidationError{}

// Validate checks the field values on RecommendRewardListReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendRewardListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendRewardListReply_List with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RecommendRewardListReply_ListMultiError, or nil if none found.
func (m *RecommendRewardListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendRewardListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Amount

	// no validation rules for Type

	// no validation rules for Reason

	if len(errors) > 0 {
		return RecommendRewardListReply_ListMultiError(errors)
	}

	return nil
}

// RecommendRewardListReply_ListMultiError is an error wrapping multiple
// validation errors returned by RecommendRewardListReply_List.ValidateAll()
// if the designated constraints aren't met.
type RecommendRewardListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendRewardListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendRewardListReply_ListMultiError) AllErrors() []error { return m }

// RecommendRewardListReply_ListValidationError is the validation error
// returned by RecommendRewardListReply_List.Validate if the designated
// constraints aren't met.
type RecommendRewardListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendRewardListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendRewardListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendRewardListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendRewardListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendRewardListReply_ListValidationError) ErrorName() string {
	return "RecommendRewardListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendRewardListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendRewardListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendRewardListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendRewardListReply_ListValidationError{}

// Validate checks the field values on FeeRewardListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeeRewardListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeeRewardListReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeeRewardListReply_ListMultiError, or nil if none found.
func (m *FeeRewardListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *FeeRewardListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Amount

	if len(errors) > 0 {
		return FeeRewardListReply_ListMultiError(errors)
	}

	return nil
}

// FeeRewardListReply_ListMultiError is an error wrapping multiple validation
// errors returned by FeeRewardListReply_List.ValidateAll() if the designated
// constraints aren't met.
type FeeRewardListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeeRewardListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeeRewardListReply_ListMultiError) AllErrors() []error { return m }

// FeeRewardListReply_ListValidationError is the validation error returned by
// FeeRewardListReply_List.Validate if the designated constraints aren't met.
type FeeRewardListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeeRewardListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeeRewardListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeeRewardListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeeRewardListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeeRewardListReply_ListValidationError) ErrorName() string {
	return "FeeRewardListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e FeeRewardListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeeRewardListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeeRewardListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeeRewardListReply_ListValidationError{}

// Validate checks the field values on WithdrawListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawListReply_ListMultiError, or nil if none found.
func (m *WithdrawListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Amount

	// no validation rules for Type

	// no validation rules for Status

	if len(errors) > 0 {
		return WithdrawListReply_ListMultiError(errors)
	}

	return nil
}

// WithdrawListReply_ListMultiError is an error wrapping multiple validation
// errors returned by WithdrawListReply_List.ValidateAll() if the designated
// constraints aren't met.
type WithdrawListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawListReply_ListMultiError) AllErrors() []error { return m }

// WithdrawListReply_ListValidationError is the validation error returned by
// WithdrawListReply_List.Validate if the designated constraints aren't met.
type WithdrawListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawListReply_ListValidationError) ErrorName() string {
	return "WithdrawListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawListReply_ListValidationError{}

// Validate checks the field values on RecommendListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendListReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecommendListReply_ListMultiError, or nil if none found.
func (m *RecommendListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	// no validation rules for Status

	if len(errors) > 0 {
		return RecommendListReply_ListMultiError(errors)
	}

	return nil
}

// RecommendListReply_ListMultiError is an error wrapping multiple validation
// errors returned by RecommendListReply_List.ValidateAll() if the designated
// constraints aren't met.
type RecommendListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendListReply_ListMultiError) AllErrors() []error { return m }

// RecommendListReply_ListValidationError is the validation error returned by
// RecommendListReply_List.Validate if the designated constraints aren't met.
type RecommendListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendListReply_ListValidationError) ErrorName() string {
	return "RecommendListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendListReply_ListValidationError{}

// Validate checks the field values on WithdrawRequest_SendBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawRequest_SendBodyMultiError, or nil if none found.
func (m *WithdrawRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Amount

	if len(errors) > 0 {
		return WithdrawRequest_SendBodyMultiError(errors)
	}

	return nil
}

// WithdrawRequest_SendBodyMultiError is an error wrapping multiple validation
// errors returned by WithdrawRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type WithdrawRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawRequest_SendBodyMultiError) AllErrors() []error { return m }

// WithdrawRequest_SendBodyValidationError is the validation error returned by
// WithdrawRequest_SendBody.Validate if the designated constraints aren't met.
type WithdrawRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawRequest_SendBodyValidationError) ErrorName() string {
	return "WithdrawRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawRequest_SendBodyValidationError{}

// Validate checks the field values on AdminRewardListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminRewardListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminRewardListReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminRewardListReply_ListMultiError, or nil if none found.
func (m *AdminRewardListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminRewardListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Amount

	// no validation rules for Type

	// no validation rules for Address

	// no validation rules for Reason

	if len(errors) > 0 {
		return AdminRewardListReply_ListMultiError(errors)
	}

	return nil
}

// AdminRewardListReply_ListMultiError is an error wrapping multiple validation
// errors returned by AdminRewardListReply_List.ValidateAll() if the
// designated constraints aren't met.
type AdminRewardListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminRewardListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminRewardListReply_ListMultiError) AllErrors() []error { return m }

// AdminRewardListReply_ListValidationError is the validation error returned by
// AdminRewardListReply_List.Validate if the designated constraints aren't met.
type AdminRewardListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminRewardListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminRewardListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminRewardListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminRewardListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminRewardListReply_ListValidationError) ErrorName() string {
	return "AdminRewardListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminRewardListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminRewardListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminRewardListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminRewardListReply_ListValidationError{}

// Validate checks the field values on AdminUserListReply_UserList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUserListReply_UserList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserListReply_UserList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUserListReply_UserListMultiError, or nil if none found.
func (m *AdminUserListReply_UserList) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserListReply_UserList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for CreatedAt

	// no validation rules for Address

	// no validation rules for BalanceUsdt

	// no validation rules for BalanceDhb

	// no validation rules for Vip

	// no validation rules for MonthRecommend

	// no validation rules for HistoryRecommend

	if len(errors) > 0 {
		return AdminUserListReply_UserListMultiError(errors)
	}

	return nil
}

// AdminUserListReply_UserListMultiError is an error wrapping multiple
// validation errors returned by AdminUserListReply_UserList.ValidateAll() if
// the designated constraints aren't met.
type AdminUserListReply_UserListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserListReply_UserListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserListReply_UserListMultiError) AllErrors() []error { return m }

// AdminUserListReply_UserListValidationError is the validation error returned
// by AdminUserListReply_UserList.Validate if the designated constraints
// aren't met.
type AdminUserListReply_UserListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserListReply_UserListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserListReply_UserListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserListReply_UserListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserListReply_UserListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserListReply_UserListValidationError) ErrorName() string {
	return "AdminUserListReply_UserListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUserListReply_UserListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserListReply_UserList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserListReply_UserListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserListReply_UserListValidationError{}

// Validate checks the field values on AdminLocationListReply_LocationList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminLocationListReply_LocationList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLocationListReply_LocationList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminLocationListReply_LocationListMultiError, or nil if none found.
func (m *AdminLocationListReply_LocationList) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLocationListReply_LocationList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Address

	// no validation rules for Row

	// no validation rules for Col

	// no validation rules for Status

	// no validation rules for CurrentLevel

	// no validation rules for Current

	// no validation rules for CurrentMax

	if len(errors) > 0 {
		return AdminLocationListReply_LocationListMultiError(errors)
	}

	return nil
}

// AdminLocationListReply_LocationListMultiError is an error wrapping multiple
// validation errors returned by
// AdminLocationListReply_LocationList.ValidateAll() if the designated
// constraints aren't met.
type AdminLocationListReply_LocationListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLocationListReply_LocationListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLocationListReply_LocationListMultiError) AllErrors() []error { return m }

// AdminLocationListReply_LocationListValidationError is the validation error
// returned by AdminLocationListReply_LocationList.Validate if the designated
// constraints aren't met.
type AdminLocationListReply_LocationListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLocationListReply_LocationListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLocationListReply_LocationListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLocationListReply_LocationListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLocationListReply_LocationListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLocationListReply_LocationListValidationError) ErrorName() string {
	return "AdminLocationListReply_LocationListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminLocationListReply_LocationListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLocationListReply_LocationList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLocationListReply_LocationListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLocationListReply_LocationListValidationError{}

// Validate checks the field values on AdminWithdrawListReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawListReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawListReply_ListMultiError, or nil if none found.
func (m *AdminWithdrawListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for Amount

	// no validation rules for RelAmount

	// no validation rules for Type

	// no validation rules for Status

	if len(errors) > 0 {
		return AdminWithdrawListReply_ListMultiError(errors)
	}

	return nil
}

// AdminWithdrawListReply_ListMultiError is an error wrapping multiple
// validation errors returned by AdminWithdrawListReply_List.ValidateAll() if
// the designated constraints aren't met.
type AdminWithdrawListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawListReply_ListMultiError) AllErrors() []error { return m }

// AdminWithdrawListReply_ListValidationError is the validation error returned
// by AdminWithdrawListReply_List.Validate if the designated constraints
// aren't met.
type AdminWithdrawListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawListReply_ListValidationError) ErrorName() string {
	return "AdminWithdrawListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawListReply_ListValidationError{}

// Validate checks the field values on AdminUserRecommendReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUserRecommendReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserRecommendReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUserRecommendReply_ListMultiError, or nil if none found.
func (m *AdminUserRecommendReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserRecommendReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Address

	// no validation rules for Id

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return AdminUserRecommendReply_ListMultiError(errors)
	}

	return nil
}

// AdminUserRecommendReply_ListMultiError is an error wrapping multiple
// validation errors returned by AdminUserRecommendReply_List.ValidateAll() if
// the designated constraints aren't met.
type AdminUserRecommendReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserRecommendReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserRecommendReply_ListMultiError) AllErrors() []error { return m }

// AdminUserRecommendReply_ListValidationError is the validation error returned
// by AdminUserRecommendReply_List.Validate if the designated constraints
// aren't met.
type AdminUserRecommendReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserRecommendReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserRecommendReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserRecommendReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserRecommendReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserRecommendReply_ListValidationError) ErrorName() string {
	return "AdminUserRecommendReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUserRecommendReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserRecommendReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserRecommendReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserRecommendReply_ListValidationError{}

// Validate checks the field values on AdminMonthRecommendReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminMonthRecommendReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminMonthRecommendReply_List with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminMonthRecommendReply_ListMultiError, or nil if none found.
func (m *AdminMonthRecommendReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminMonthRecommendReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for RecommendAddress

	// no validation rules for Id

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return AdminMonthRecommendReply_ListMultiError(errors)
	}

	return nil
}

// AdminMonthRecommendReply_ListMultiError is an error wrapping multiple
// validation errors returned by AdminMonthRecommendReply_List.ValidateAll()
// if the designated constraints aren't met.
type AdminMonthRecommendReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminMonthRecommendReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminMonthRecommendReply_ListMultiError) AllErrors() []error { return m }

// AdminMonthRecommendReply_ListValidationError is the validation error
// returned by AdminMonthRecommendReply_List.Validate if the designated
// constraints aren't met.
type AdminMonthRecommendReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminMonthRecommendReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminMonthRecommendReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminMonthRecommendReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminMonthRecommendReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminMonthRecommendReply_ListValidationError) ErrorName() string {
	return "AdminMonthRecommendReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminMonthRecommendReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminMonthRecommendReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminMonthRecommendReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminMonthRecommendReply_ListValidationError{}

// Validate checks the field values on AdminConfigReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminConfigReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminConfigReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminConfigReply_ListMultiError, or nil if none found.
func (m *AdminConfigReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminConfigReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Value

	if len(errors) > 0 {
		return AdminConfigReply_ListMultiError(errors)
	}

	return nil
}

// AdminConfigReply_ListMultiError is an error wrapping multiple validation
// errors returned by AdminConfigReply_List.ValidateAll() if the designated
// constraints aren't met.
type AdminConfigReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminConfigReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminConfigReply_ListMultiError) AllErrors() []error { return m }

// AdminConfigReply_ListValidationError is the validation error returned by
// AdminConfigReply_List.Validate if the designated constraints aren't met.
type AdminConfigReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminConfigReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminConfigReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminConfigReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminConfigReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminConfigReply_ListValidationError) ErrorName() string {
	return "AdminConfigReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminConfigReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminConfigReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminConfigReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminConfigReply_ListValidationError{}

// Validate checks the field values on AdminConfigUpdateRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminConfigUpdateRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminConfigUpdateRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminConfigUpdateRequest_SendBodyMultiError, or nil if none found.
func (m *AdminConfigUpdateRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminConfigUpdateRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Value

	if len(errors) > 0 {
		return AdminConfigUpdateRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AdminConfigUpdateRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// AdminConfigUpdateRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type AdminConfigUpdateRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminConfigUpdateRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminConfigUpdateRequest_SendBodyMultiError) AllErrors() []error { return m }

// AdminConfigUpdateRequest_SendBodyValidationError is the validation error
// returned by AdminConfigUpdateRequest_SendBody.Validate if the designated
// constraints aren't met.
type AdminConfigUpdateRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminConfigUpdateRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminConfigUpdateRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminConfigUpdateRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminConfigUpdateRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminConfigUpdateRequest_SendBodyValidationError) ErrorName() string {
	return "AdminConfigUpdateRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminConfigUpdateRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminConfigUpdateRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminConfigUpdateRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminConfigUpdateRequest_SendBodyValidationError{}
